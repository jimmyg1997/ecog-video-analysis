#!/usr/bin/env python3
"""
Demo: How to Run Single Modeling Approaches
IEEE-SMC-2025 ECoG Video Analysis Competition

This script demonstrates how to run individual modeling approaches.
"""

def show_usage_examples():
    """Show usage examples for running single models."""
    
    print("üéØ HOW TO RUN SINGLE MODELING APPROACHES")
    print("=" * 70)
    print()
    
    print("üìã METHOD 1: Using run_single_model.py (Advanced)")
    print("-" * 50)
    print("This script provides full command-line control with arguments:")
    print()
    print("# Run only the ensemble model:")
    print("python run_single_model.py --model ensemble")
    print()
    print("# Run only the temporal attention model:")
    print("python run_single_model.py --model temporal_attention")
    print()
    print("# Run only the progressive learning model:")
    print("python run_single_model.py --model progressive_learning")
    print()
    print("# Run all models:")
    print("python run_single_model.py --model all")
    print()
    print("# Specify a particular experiment:")
    print("python run_single_model.py --model ensemble --experiment experiment5")
    print()
    print("# Specify custom output directory:")
    print("python run_single_model.py --model ensemble --output results/my_ensemble")
    print()
    
    print("üìã METHOD 2: Using run_specific_model.py (Simple)")
    print("-" * 50)
    print("This script provides simple command-line usage:")
    print()
    print("# Run only the ensemble model:")
    print("python run_specific_model.py ensemble")
    print()
    print("# Run only the temporal attention model:")
    print("python run_specific_model.py temporal_attention")
    print()
    print("# Run only the progressive learning model:")
    print("python run_specific_model.py progressive_learning")
    print()
    
    print("üìã METHOD 3: Direct Python Import (Programmatic)")
    print("-" * 50)
    print("You can also import and use the models directly in Python:")
    print()
    print("```python")
    print("import sys")
    print("sys.path.append('src')")
    print("from modeling.ensemble_model import MultiModalEnsemble")
    print("from utils.config import AnalysisConfig")
    print()
    print("# Load your features and labels")
    print("all_features = {...}  # Your feature data")
    print("labels = np.array([...])  # Your labels")
    print()
    print("# Initialize and train ensemble model")
    print("config = AnalysisConfig()")
    print("ensemble_model = MultiModalEnsemble(config)")
    print("results = ensemble_model.train_ensemble(all_features, labels)")
    print("evaluation = ensemble_model.evaluate_ensemble(all_features, labels)")
    print("print(f'Accuracy: {evaluation[\"accuracy\"]:.3f}')")
    print("```")
    print()
    
    print("üìã METHOD 4: Jupyter Notebook Integration")
    print("-" * 50)
    print("You can also run individual models in Jupyter notebooks:")
    print()
    print("```python")
    print("# In a Jupyter notebook cell")
    print("import sys")
    print("sys.path.append('src')")
    print("from modeling.ensemble_model import MultiModalEnsemble")
    print()
    print("# Load features from your latest experiment")
    print("import numpy as np")
    print("from pathlib import Path")
    print()
    print("features_path = Path('data/features/experiment8')  # Use your latest experiment")
    print("all_features = {}")
    print("for extractor_dir in ['template_correlation', 'csp_lda', 'eegnet', 'transformer', 'comprehensive']:")
    print("    extractor_path = features_path / extractor_dir")
    print("    if extractor_path.exists():")
    print("        features = {}")
    print("        for file_path in extractor_path.glob('*.npy'):")
    print("            features[file_path.stem] = np.load(file_path)")
    print("        all_features[extractor_dir] = features")
    print()
    print("# Create dummy labels (replace with your actual labels)")
    print("labels = np.zeros(252)  # Assuming 252 trials")
    print()
    print("# Train ensemble model")
    print("from utils.config import AnalysisConfig")
    print("config = AnalysisConfig()")
    print("ensemble_model = MultiModalEnsemble(config)")
    print("results = ensemble_model.train_ensemble(all_features, labels)")
    print("evaluation = ensemble_model.evaluate_ensemble(all_features, labels)")
    print("print(f'Ensemble Accuracy: {evaluation[\"accuracy\"]:.3f}')")
    print("```")
    print()
    
    print("üéØ RECOMMENDED USAGE")
    print("-" * 50)
    print("For quick testing: Use METHOD 2 (run_specific_model.py)")
    print("For full control: Use METHOD 1 (run_single_model.py)")
    print("For development: Use METHOD 3 (Direct Python import)")
    print("For analysis: Use METHOD 4 (Jupyter notebooks)")
    print()
    
    print("üìä EXPECTED OUTPUTS")
    print("-" * 50)
    print("Each model will create:")
    print("‚Ä¢ Trained model files (saved in results/05_modelling/experiment_X/)")
    print("‚Ä¢ Evaluation results (accuracy, predictions, etc.)")
    print("‚Ä¢ Summary reports (text files with model details)")
    print("‚Ä¢ JSON results files (for further analysis)")
    print()
    
    print("‚ö†Ô∏è  PREREQUISITES")
    print("-" * 50)
    print("Make sure you have:")
    print("‚Ä¢ Run the preprocessing pipeline first (run_comprehensive_pipeline_v2.py)")
    print("‚Ä¢ Features extracted in data/features/experiment_X/")
    print("‚Ä¢ Required Python packages installed (torch, sklearn, plotly, etc.)")
    print()

if __name__ == "__main__":
    show_usage_examples()
